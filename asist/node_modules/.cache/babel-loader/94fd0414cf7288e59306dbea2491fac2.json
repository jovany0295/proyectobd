{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { wrapWithWarningOnCall } from '../../../utils/warning';\n/**\r\n * @category Columns\r\n * @deprecated Use the selector returning exactly the value you are looking for.\r\n * @ignore - do not document.\r\n * TODO v6: Rename `gridColumnsStateSelector`\r\n */\n\nexport var gridColumnsSelector = function gridColumnsSelector(state) {\n  return state.columns;\n};\n/**\r\n * Get the field of each column.\r\n * @category Columns\r\n */\n\nexport var gridColumnFieldsSelector = createSelector(gridColumnsSelector, function (columnsState) {\n  return columnsState.all;\n});\n/**\r\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Columns\r\n */\n\nexport var gridColumnLookupSelector = createSelector(gridColumnsSelector, function (columnsState) {\n  return columnsState.lookup;\n});\n/**\r\n * Get the columns as an array.\r\n * @category Columns\r\n */\n\nexport var gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, function (allFields, lookup) {\n  return allFields.map(function (field) {\n    return lookup[field];\n  });\n});\n/**\r\n * Get the column visibility model, containing the visibility status of each column.\r\n * If a column is not registered in the model, it is visible.\r\n * @category Visible Columns\r\n */\n\nexport var gridColumnVisibilityModelSelector = createSelector(gridColumnsSelector, function (columnsState) {\n  return columnsState.columnVisibilityModel;\n});\n/**\r\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Visible Columns\r\n */\n\nexport var gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, function (columns, columnVisibilityModel) {\n  return columns.filter(function (column) {\n    return columnVisibilityModel[column.field] !== false;\n  });\n});\n/**\r\n * Get the field of each visible column.\r\n * @category Visible Columns\r\n */\n\nexport var gridVisibleColumnFieldsSelector = createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  return visibleColumns.map(function (column) {\n    return column.field;\n  });\n});\n/**\r\n * Get the left position in pixel of each visible columns relative to the left of the first column.\r\n * @category Visible Columns\r\n */\n\nexport var gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  var positions = [];\n  var currentPosition = 0;\n  for (var i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n/**\r\n * Get the summed width of all the visible columns.\r\n * @category Visible Columns\r\n */\n\nexport var gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, function (visibleColumns, positions) {\n  var colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n/**\r\n * Get the filterable columns as an array.\r\n * @category Columns\r\n */\n\nexport var gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, function (columns) {\n  return columns.filter(function (col) {\n    return col.filterable;\n  });\n});\n/**\r\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Columns\r\n */\n\nexport var gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, function (columns) {\n  return columns.reduce(function (acc, col) {\n    if (col.filterable) {\n      acc[col.field] = col;\n    }\n    return acc;\n  }, {});\n});\n/**\r\n * @category Columns\r\n * @deprecated Use `gridColumnFieldsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport var allGridColumnsFieldsSelector = wrapWithWarningOnCall(gridColumnFieldsSelector, ['MUI: The method allGridColumnsFieldsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnFieldsSelector instead']);\n/**\r\n * @category Columns\r\n * @deprecated Use `gridColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport var allGridColumnsSelector = wrapWithWarningOnCall(gridColumnDefinitionsSelector, ['MUI: The method allGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnDefinitionsSelector instead']);\n/**\r\n * @category Visible Columns\r\n * @deprecated Use `gridVisibleColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport var visibleGridColumnsSelector = wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector, ['MUI: The method visibleGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridVisibleColumnDefinitionsSelector instead']);\n/**\r\n * @category Columns\r\n * @deprecated Use `gridFilterableColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport var filterableGridColumnsSelector = wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector, ['MUI: The method filterableGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead']);\n/**\r\n * @category Columns\r\n * @deprecated Use `gridFilterableColumnLookupSelector` instead (not the same return format).\r\n * @ignore - do not document.\r\n */\n\nexport var filterableGridColumnsIdsSelector = wrapWithWarningOnCall(createSelector(gridFilterableColumnDefinitionsSelector, function (columns) {\n  return columns.map(function (col) {\n    return col.field;\n  });\n}), ['MUI: The method filterableGridColumnsIdsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead.', 'The return format is now a lookup, if you want to get the same output as before, use the following code:', '', 'const lookup = gridFilterableColumnLookupSelector(apiRef);', 'const fields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);']);\n/**\r\n * Get the amount of visible columns.\r\n * @category Visible Columns\r\n * @deprecated Use the length of the array returned by `gridVisibleColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport var visibleGridColumnsLengthSelector = wrapWithWarningOnCall(createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  return visibleColumns.length;\n}), ['MUI: The method visibleGridColumnsLengthSelector is deprecated and will be removed in the next major version.', 'Use the length of the array returned by gridVisibleColumnDefinitionsSelector instead.']);\n/**\r\n * @category Visible Columns\r\n * @deprecated Use `gridColumnsTotalWidthSelector` or `gridColumnPositionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport var gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, function (positions, totalWidth) {\n  return {\n    totalWidth: totalWidth,\n    positions: positions\n  };\n}), ['MUI: The method gridColumnsMetaSelector is deprecated and will be removed in the next major version.', 'Use gridColumnsTotalWidthSelector or gridColumnPositionsSelector instead']);","map":null,"metadata":{},"sourceType":"module"}