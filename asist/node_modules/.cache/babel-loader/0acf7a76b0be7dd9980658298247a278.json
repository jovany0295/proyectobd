{"ast":null,"code":"import React, { memo, useState, useEffect } from \"react\";\nvar readCSV = function readCSV(str, rowNumber) {\n  var delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \";\";\n  var headers = str.slice(0, str.indexOf(\"\\n\")).split(delim);\n  var rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\n\n  //ignore empty rows\n  var cleanRows = rows.filter(function (item) {\n    return item !== \"\";\n  });\n  var result = splitCsvRows(rowNumber, headers, cleanRows, delim);\n  if (result.isFileCorrect) {\n    return result.data;\n  } else {\n    return null;\n  }\n};\nvar splitCsvRows = function splitCsvRows(numberCol, headers, rows, delim) {\n  var isFileCorrect = false;\n  var data = rows.map(function (row) {\n    var values = row.split(delim);\n    values.length !== numberCol ? isFileCorrect = false : isFileCorrect = true;\n    var eachObject = headers.reduce(function (obj, header, i) {\n      var header_str = header.replace(/\\s/g, '');\n      obj[header_str] = values[i];\n      return obj;\n    }, {});\n    return eachObject;\n  });\n  return {\n    data: data,\n    isFileCorrect: isFileCorrect\n  };\n};\nexport default {\n  readCSV: readCSV\n};","map":{"version":3,"names":["React","memo","useState","useEffect","readCSV","str","rowNumber","delim","headers","slice","indexOf","split","rows","cleanRows","filter","item","result","splitCsvRows","isFileCorrect","data","numberCol","map","row","values","length","eachObject","reduce","obj","header","i","header_str","replace"],"sources":["C:/Users/cuati/Documents/Maestria/BDYC/proyectobd/asist/src/pages/Listas/ReadCSV.js"],"sourcesContent":["import React, { memo, useState, useEffect } from \"react\";\r\n\r\n  const readCSV = (str, rowNumber, delim = \";\") => {\r\n    \r\n    const headers = str.slice(0, str.indexOf(\"\\n\")).split(delim);\r\n    const rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n\r\n    //ignore empty rows\r\n    const cleanRows = rows.filter(item => item !== \"\")\r\n\r\n    let result = splitCsvRows(rowNumber, headers, cleanRows, delim );\r\n\r\n    if(result.isFileCorrect)\r\n    {\r\n      return result.data;\r\n    }\r\n    else\r\n    {\r\n        return null\r\n    }\r\n  }\r\n\r\n\r\nconst splitCsvRows = (numberCol, headers, rows, delim) => {\r\n\r\n    let isFileCorrect = false;\r\n    \r\n    const data = rows.map((row) => {\r\n    \r\n      const values = row.split(delim);\r\n\r\n      values.length !== numberCol ? isFileCorrect = false : isFileCorrect = true;\r\n        \r\n      const eachObject = headers.reduce((obj, header, i) => {\r\n        const header_str = header.replace(/\\s/g, '');\r\n        obj[header_str] = values[i];\r\n          return obj;\r\n        }, {});\r\n      return eachObject;\r\n    });\r\n    return ({\r\n      data : data,\r\n      isFileCorrect : isFileCorrect\r\n    })\r\n}\r\n\r\nexport default {\r\n    readCSV\r\n}"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAEtD,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAIC,GAAG,EAAEC,SAAS,EAAkB;EAAA,IAAhBC,KAAK,uEAAG,GAAG;EAE1C,IAAMC,OAAO,GAAGH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAEJ,GAAG,CAACK,OAAO,CAAC,IAAI,CAAC,CAAC,CAACC,KAAK,CAACJ,KAAK,CAAC;EAC5D,IAAMK,IAAI,GAAGP,GAAG,CAACI,KAAK,CAACJ,GAAG,CAACK,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;;EAEzD;EACA,IAAME,SAAS,GAAGD,IAAI,CAACE,MAAM,CAAC,UAAAC,IAAI;IAAA,OAAIA,IAAI,KAAK,EAAE;EAAA,EAAC;EAElD,IAAIC,MAAM,GAAGC,YAAY,CAACX,SAAS,EAAEE,OAAO,EAAEK,SAAS,EAAEN,KAAK,CAAE;EAEhE,IAAGS,MAAM,CAACE,aAAa,EACvB;IACE,OAAOF,MAAM,CAACG,IAAI;EACpB,CAAC,MAED;IACI,OAAO,IAAI;EACf;AACF,CAAC;AAGH,IAAMF,YAAY,GAAG,SAAfA,YAAY,CAAIG,SAAS,EAAEZ,OAAO,EAAEI,IAAI,EAAEL,KAAK,EAAK;EAEtD,IAAIW,aAAa,GAAG,KAAK;EAEzB,IAAMC,IAAI,GAAGP,IAAI,CAACS,GAAG,CAAC,UAACC,GAAG,EAAK;IAE7B,IAAMC,MAAM,GAAGD,GAAG,CAACX,KAAK,CAACJ,KAAK,CAAC;IAE/BgB,MAAM,CAACC,MAAM,KAAKJ,SAAS,GAAGF,aAAa,GAAG,KAAK,GAAGA,aAAa,GAAG,IAAI;IAE1E,IAAMO,UAAU,GAAGjB,OAAO,CAACkB,MAAM,CAAC,UAACC,GAAG,EAAEC,MAAM,EAAEC,CAAC,EAAK;MACpD,IAAMC,UAAU,GAAGF,MAAM,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MAC5CJ,GAAG,CAACG,UAAU,CAAC,GAAGP,MAAM,CAACM,CAAC,CAAC;MACzB,OAAOF,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,OAAOF,UAAU;EACnB,CAAC,CAAC;EACF,OAAQ;IACNN,IAAI,EAAGA,IAAI;IACXD,aAAa,EAAGA;EAClB,CAAC;AACL,CAAC;AAED,eAAe;EACXd,OAAO,EAAPA;AACJ,CAAC"},"metadata":{},"sourceType":"module"}