{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"badgeContent\", \"component\", \"children\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"showZero\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '../composeClasses';\nimport useBadge from './useBadge';\nimport { getBadgeUnstyledUtilityClass } from './badgeUnstyledClasses';\nimport { useSlotProps } from '../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var invisible = ownerState.invisible;\n  var slots = {\n    root: ['root'],\n    badge: ['badge', invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUnstyledUtilityClass, undefined);\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled badge](https://mui.com/base/react-badge/)\r\n *\r\n * API:\r\n *\r\n * - [BadgeUnstyled API](https://mui.com/base/api/badge-unstyled/)\r\n */\n\nvar BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  var component = props.component,\n    children = props.children,\n    _props$components = props.components,\n    components = _props$components === void 0 ? {} : _props$components,\n    _props$componentsProp = props.componentsProps,\n    componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n    _props$max = props.max,\n    maxProp = _props$max === void 0 ? 99 : _props$max,\n    _props$showZero = props.showZero,\n    showZero = _props$showZero === void 0 ? false : _props$showZero,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var _useBadge = useBadge(_extends({}, props, {\n      max: maxProp\n    })),\n    badgeContent = _useBadge.badgeContent,\n    max = _useBadge.max,\n    displayValue = _useBadge.displayValue,\n    invisible = _useBadge.invisible;\n  var ownerState = _extends({}, props, {\n    badgeContent: badgeContent,\n    invisible: invisible,\n    max: max,\n    showZero: showZero\n  });\n  var classes = useUtilityClasses(ownerState);\n  var Root = component || components.Root || 'span';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    externalSlotProps: componentsProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      ref: ref\n    },\n    ownerState: ownerState,\n    className: classes.root\n  });\n  var Badge = components.Badge || 'span';\n  var badgeProps = useSlotProps({\n    elementType: Badge,\n    externalSlotProps: componentsProps.badge,\n    ownerState: ownerState,\n    className: classes.badge\n  });\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, {\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, {\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content rendered within the badge.\r\n   */\n  badgeContent: PropTypes.node,\n  /**\r\n   * The badge will be added relative to this node.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * The components used for each slot inside the Badge.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n  /**\r\n   * The props used for each slot inside the Badge.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.shape({\n    badge: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * If `true`, the badge is invisible.\r\n   * @default false\r\n   */\n  invisible: PropTypes.bool,\n  /**\r\n   * Max count to show.\r\n   * @default 99\r\n   */\n  max: PropTypes.number,\n  /**\r\n   * Controls whether the badge is hidden when `badgeContent` is zero.\r\n   * @default false\r\n   */\n  showZero: PropTypes.bool\n} : void 0;\nexport default BadgeUnstyled;","map":null,"metadata":{},"sourceType":"module"}