{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot } from '../components';\nimport { GridContextProvider } from '../context/GridContextProvider';\nimport { useDataGridComponent } from './useDataGridComponent';\nimport { useDataGridProps, MAX_PAGE_SIZE } from './useDataGridProps';\nimport { DataGridVirtualScroller } from '../components/DataGridVirtualScroller';\nimport { DataGridColumnHeaders } from '../components/DataGridColumnHeaders';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DataGridRaw = /*#__PURE__*/React.forwardRef(function DataGrid(inProps, ref) {\n  var props = useDataGridProps(inProps);\n  var apiRef = useDataGridComponent(props);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridColumnHeaders,\n          VirtualScrollerComponent: DataGridVirtualScroller\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport var DataGrid = /*#__PURE__*/React.memo(DataGridRaw);\nDataGridRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The label of the grid.\r\n   */\n  'aria-label': PropTypes.string,\n  /**\r\n   * The id of the element containing a label for the grid.\r\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\r\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\r\n   * @default false\r\n   */\n  autoHeight: PropTypes.bool,\n  /**\r\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\r\n   * @default false\r\n   */\n  autoPageSize: PropTypes.bool,\n  /**\r\n   * Controls the modes of the cells.\r\n   */\n  cellModesModel: PropTypes.object,\n  /**\r\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\r\n   * @default false\r\n   */\n  checkboxSelection: PropTypes.bool,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * Number of extra columns to be rendered before/after the visible slice.\r\n   * @default 3\r\n   */\n  columnBuffer: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n  /**\r\n   * Set of columns of type [[GridColumns]].\r\n   */\n  columns: chainPropTypes(PropTypes.array.isRequired, function (props) {\n    // @ts-ignore because otherwise `build:api` doesn't work\n    if (props.columns && props.columns.some(function (column) {\n      return column.resizable;\n    })) {\n      return new Error([\"MUI: `column.resizable = true` is not a valid prop.\", 'Column resizing is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    return null;\n  }),\n  /**\r\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\r\n   * @default 3\r\n   */\n  columnThreshold: PropTypes.number,\n  /**\r\n   * Extend native column types with your new column types.\r\n   */\n  columnTypes: PropTypes.object,\n  /**\r\n   * Set the column visibility model of the grid.\r\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\r\n   */\n  columnVisibilityModel: PropTypes.object,\n  /**\r\n   * Overrideable components.\r\n   */\n  components: PropTypes.object,\n  /**\r\n   * Overrideable components props dynamically passed to the component at rendering.\r\n   */\n  componentsProps: PropTypes.object,\n  /**\r\n   * Set the density of the grid.\r\n   * @default \"standard\"\r\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n  /**\r\n   * If `true`, column filters are disabled.\r\n   * @default false\r\n   */\n  disableColumnFilter: PropTypes.bool,\n  /**\r\n   * If `true`, the column menu is disabled.\r\n   * @default false\r\n   */\n  disableColumnMenu: PropTypes.bool,\n  /**\r\n   * If `true`, hiding/showing columns is disabled.\r\n   * @default false\r\n   */\n  disableColumnSelector: PropTypes.bool,\n  /**\r\n   * If `true`, the density selector is disabled.\r\n   * @default false\r\n   */\n  disableDensitySelector: PropTypes.bool,\n  /**\r\n   * If `true`, rows will not be extended to fill the full width of the grid container.\r\n   * @default false\r\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n  /**\r\n   * If `true`, modification to a cell will not be discarded if the mode is changed from \"edit\" to \"view\" while processing props.\r\n   * @default false\r\n   */\n  disableIgnoreModificationsIfProcessingProps: PropTypes.bool,\n  /**\r\n   * If `true`, the selection on click on a row or cell is disabled.\r\n   * @default false\r\n   */\n  disableSelectionOnClick: PropTypes.bool,\n  /**\r\n   * If `true`, the virtualization is disabled.\r\n   * @default false\r\n   */\n  disableVirtualization: PropTypes.bool,\n  /**\r\n   * Controls whether to use the cell or row editing.\r\n   * @default \"cell\"\r\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n  /**\r\n   * Set the edit rows model of the grid.\r\n   */\n  editRowsModel: PropTypes.object,\n  /**\r\n   * An error that will turn the grid into its error state and display the error component.\r\n   */\n  error: PropTypes.any,\n  /**\r\n   * Features under development.\r\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\r\n   */\n  experimentalFeatures: PropTypes.shape({\n    columnGrouping: PropTypes.bool,\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n  /**\r\n   * Filtering can be processed on the server or client-side.\r\n   * Set it to 'server' if you would like to handle filtering on the server-side.\r\n   * @default \"client\"\r\n   */\n  filterMode: PropTypes.oneOf(['client', 'server']),\n  /**\r\n   * Set the filter model of the grid.\r\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n  /**\r\n   * Function that applies CSS classes dynamically on cells.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @returns {string} The CSS class to apply to the cell.\r\n   */\n  getCellClassName: PropTypes.func,\n  /**\r\n   * Function that returns the element to render in row detail.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @returns {JSX.Element} The row detail element.\r\n   */\n  getDetailPanelContent: PropTypes.func,\n  /**\r\n   * Function that returns the estimated height for a row.\r\n   * Only works if dynamic row height is used.\r\n   * Once the row height is measured this value is discarded.\r\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\r\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\r\n   */\n  getEstimatedRowHeight: PropTypes.func,\n  /**\r\n   * Function that applies CSS classes dynamically on rows.\r\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\r\n   * @returns {string} The CSS class to apply to the row.\r\n   */\n  getRowClassName: PropTypes.func,\n  /**\r\n   * Function that sets the row height per row.\r\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\r\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\r\n   */\n  getRowHeight: PropTypes.func,\n  /**\r\n   * Return the id of a given [[GridRowModel]].\r\n   */\n  getRowId: PropTypes.func,\n  /**\r\n   * Function that allows to specify the spacing between rows.\r\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\r\n   * @returns {GridRowSpacing} The row spacing values.\r\n   */\n  getRowSpacing: PropTypes.func,\n  /**\r\n   * Set the height in pixel of the column headers in the grid.\r\n   * @default 56\r\n   */\n  headerHeight: PropTypes.number,\n  /**\r\n   * If `true`, the footer component is hidden.\r\n   * @default false\r\n   */\n  hideFooter: PropTypes.bool,\n  /**\r\n   * If `true`, the pagination component in the footer is hidden.\r\n   * @default false\r\n   */\n  hideFooterPagination: PropTypes.bool,\n  /**\r\n   * If `true`, the selected row count in the footer is hidden.\r\n   * @default false\r\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n  /**\r\n   * The initial state of the DataGrid.\r\n   * The data in it will be set in the state on initialization but will not be controlled.\r\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\r\n   */\n  initialState: PropTypes.object,\n  /**\r\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @returns {boolean} A boolean indicating if the cell is editable.\r\n   */\n  isCellEditable: PropTypes.func,\n  /**\r\n   * Determines if a row can be selected.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @returns {boolean} A boolean indicating if the cell is selectable.\r\n   */\n  isRowSelectable: PropTypes.func,\n  /**\r\n   * If `true`, the selection model will retain selected rows that do not exist.\r\n   * Useful when using server side pagination and row selections need to be retained\r\n   * when changing pages.\r\n   * @default false\r\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n  /**\r\n   * If `true`, a  loading overlay is displayed.\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * Set the locale text of the grid.\r\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\r\n   */\n  localeText: PropTypes.object,\n  /**\r\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\r\n   * @default console\r\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n  /**\r\n   * Allows to pass the logging level or false to turn off logging.\r\n   * @default \"error\" (\"warn\" in dev mode)\r\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n  /**\r\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\r\n   */\n  nonce: PropTypes.string,\n  /**\r\n   * Callback fired when any cell is clicked.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellClick: PropTypes.func,\n  /**\r\n   * Callback fired when a double click event comes from a cell element.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellDoubleClick: PropTypes.func,\n  /**\r\n   * Callback fired when the cell changes are committed.\r\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellEditCommit: PropTypes.func,\n  /**\r\n   * Callback fired when the cell turns to edit mode.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\r\n   */\n  onCellEditStart: PropTypes.func,\n  /**\r\n   * Callback fired when the cell turns to view mode.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\n  onCellEditStop: PropTypes.func,\n  /**\r\n   * Callback fired when a cell loses focus.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellFocusOut: PropTypes.func,\n  /**\r\n   * Callback fired when a keydown event comes from a cell element.\r\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellKeyDown: PropTypes.func,\n  /**\r\n   * Callback fired when the `cellModesModel` prop changes.\r\n   * @param {GridCellModesModel} cellModesModel Object containig which cells are in \"edit\" mode.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onCellModesModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when a click event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderClick: PropTypes.func,\n  /**\r\n   * Callback fired when a double click event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n  /**\r\n   * Callback fired when a mouse enter event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderEnter: PropTypes.func,\n  /**\r\n   * Callback fired when a mouse leave event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderLeave: PropTypes.func,\n  /**\r\n   * Callback fired when a mouseout event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderOut: PropTypes.func,\n  /**\r\n   * Callback fired when a mouseover event comes from a column header element.\r\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnHeaderOver: PropTypes.func,\n  /**\r\n   * Callback fired when a column is reordered.\r\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnOrderChange: PropTypes.func,\n  /**\r\n   * Callback fired when a column visibility changes.\r\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\r\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\r\n   */\n  onColumnVisibilityChange: PropTypes.func,\n  /**\r\n   * Callback fired when the column visibility model changes.\r\n   * @param {GridColumnVisibilityModel} model The new model.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the edit cell value changes.\r\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\r\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)\r\n   */\n  onEditCellPropsChange: PropTypes.func,\n  /**\r\n   * Callback fired when the `editRowsModel` changes.\r\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onEditRowsModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when an exception is thrown in the grid.\r\n   * @param {any} args The arguments passed to the `showError` call.\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onError: PropTypes.func,\n  /**\r\n   * Callback fired when the Filter model changes before the filters are applied.\r\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onFilterModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the menu is closed.\r\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onMenuClose: PropTypes.func,\n  /**\r\n   * Callback fired when the menu is opened.\r\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onMenuOpen: PropTypes.func,\n  /**\r\n   * Callback fired when the current page has changed.\r\n   * @param {number} page Index of the page displayed on the Grid.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPageChange: PropTypes.func,\n  /**\r\n   * Callback fired when the page size has changed.\r\n   * @param {number} pageSize Size of the page displayed on the Grid.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPageSizeChange: PropTypes.func,\n  /**\r\n   * Callback fired when the preferences panel is closed.\r\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPreferencePanelClose: PropTypes.func,\n  /**\r\n   * Callback fired when the preferences panel is opened.\r\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onPreferencePanelOpen: PropTypes.func,\n  /**\r\n   * Callback called when `processRowUpdate` throws an error or rejects.\r\n   * @param {any} error The error thrown.\r\n   */\n  onProcessRowUpdateError: PropTypes.func,\n  /**\r\n   * Callback fired when the grid is resized.\r\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onResize: PropTypes.func,\n  /**\r\n   * Callback fired when a row is clicked.\r\n   * Not called if the target clicked is an interactive element added by the built-in columns.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowClick: PropTypes.func,\n  /**\r\n   * Callback fired when a double click event comes from a row container element.\r\n   * @param {GridRowParams} params With all properties from [[RowParams]].\r\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowDoubleClick: PropTypes.func,\n  /**\r\n   * Callback fired when the row changes are committed.\r\n   * @param {GridRowId} id The row id.\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\n  onRowEditCommit: PropTypes.func,\n  /**\r\n   * Callback fired when the row turns to edit mode.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\r\n   */\n  onRowEditStart: PropTypes.func,\n  /**\r\n   * Callback fired when the row turns to view mode.\r\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\r\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\r\n   */\n  onRowEditStop: PropTypes.func,\n  /**\r\n   * Callback fired when the `rowModesModel` prop changes.\r\n   * @param {GridRowModesModel} rowModesModel Object containig which rows are in \"edit\" mode.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onRowModesModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the selection state of one or multiple rows changes.\r\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onSelectionModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the sort model changes before a column is sorted.\r\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   */\n  onSortModelChange: PropTypes.func,\n  /**\r\n   * Callback fired when the state of the grid is updated.\r\n   * @param {GridState} state The new state.\r\n   * @param {MuiEvent<{}>} event The event object.\r\n   * @param {GridCallbackDetails} details Additional details for this callback.\r\n   * @ignore - do not document.\r\n   */\n  onStateChange: PropTypes.func,\n  /**\r\n   * The zero-based index of the current page.\r\n   * @default 0\r\n   */\n  page: PropTypes.number,\n  /**\r\n   * Set the number of rows in one page.\r\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\r\n   * @default 100\r\n   */\n  pageSize: chainPropTypes(PropTypes.number, function (props) {\n    if (props.pageSize && props.pageSize > MAX_PAGE_SIZE) {\n      return new Error([\"MUI: `<DataGrid pageSize={\".concat(props.pageSize, \"} />` is not a valid prop.\"), \"Only page size below \".concat(MAX_PAGE_SIZE, \" is available in the MIT version.\"), '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    return null;\n  }),\n  pagination: function pagination(props) {\n    if (props.pagination === false) {\n      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination.'].join('\\n'));\n    }\n    return null;\n  },\n  /**\r\n   * Pagination can be processed on the server or client-side.\r\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\r\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\r\n   * @default \"client\"\r\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n  /**\r\n   * Callback called before updating a row with new values in the row and cell editing.\r\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\r\n   * @template R\r\n   * @param {R} newRow Row object with the new values.\r\n   * @param {R} oldRow Row object with the old values.\r\n   * @returns {Promise<R> | R} The final values to update the row.\r\n   */\n  processRowUpdate: PropTypes.func,\n  /**\r\n   * Number of extra rows to be rendered before/after the visible slice.\r\n   * @default 3\r\n   */\n  rowBuffer: PropTypes.number,\n  /**\r\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\r\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\r\n   */\n  rowCount: PropTypes.number,\n  /**\r\n   * Set the height in pixel of a row in the grid.\r\n   * @default 52\r\n   */\n  rowHeight: PropTypes.number,\n  /**\r\n   * Controls the modes of the rows.\r\n   */\n  rowModesModel: PropTypes.object,\n  /**\r\n   * Set of rows of type [[GridRowsProp]].\r\n   */\n  rows: PropTypes.array.isRequired,\n  /**\r\n   * Sets the type of space between rows added by `getRowSpacing`.\r\n   * @default \"margin\"\r\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n  /**\r\n   * Select the pageSize dynamically using the component UI.\r\n   * @default [25, 50, 100]\r\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n  /**\r\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\r\n   * @default 3\r\n   */\n  rowThreshold: PropTypes.number,\n  /**\r\n   * Override the height/width of the grid inner scrollbar.\r\n   */\n  scrollbarSize: PropTypes.number,\n  /**\r\n   * Set the selection model of the grid.\r\n   */\n  selectionModel: chainPropTypes(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]), function (props) {\n    if (!props.checkboxSelection && Array.isArray(props.selectionModel) && props.selectionModel.length > 1) {\n      return new Error([\"MUI: `<DataGrid selectionModel={\".concat(JSON.stringify(props.selectionModel), \"} />` is not a valid prop.\"), 'selectionModel can only be of 1 item in DataGrid.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    return null;\n  }),\n  /**\r\n   * If `true`, the right border of the cells are displayed.\r\n   * @default false\r\n   */\n  showCellRightBorder: PropTypes.bool,\n  /**\r\n   * If `true`, the right border of the column headers are displayed.\r\n   * @default false\r\n   */\n  showColumnRightBorder: PropTypes.bool,\n  /**\r\n   * Sorting can be processed on the server or client-side.\r\n   * Set it to 'client' if you would like to handle sorting on the client-side.\r\n   * Set it to 'server' if you would like to handle sorting on the server-side.\r\n   * @default \"client\"\r\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n  /**\r\n   * The order of the sorting sequence.\r\n   * @default ['asc', 'desc', null]\r\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n  /**\r\n   * Set the sort model of the grid.\r\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n};","map":null,"metadata":{},"sourceType":"module"}