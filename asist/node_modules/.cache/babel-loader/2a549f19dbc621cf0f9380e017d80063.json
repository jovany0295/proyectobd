{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\n/**\r\n * @category Sorting\r\n * @ignore - do not document.\r\n */\n\nexport var gridSortingStateSelector = function gridSortingStateSelector(state) {\n  return state.sorting;\n};\n/**\r\n * Get the id of the rows after the sorting process.\r\n * @category Sorting\r\n */\n\nexport var gridSortedRowIdsSelector = createSelector(gridSortingStateSelector, function (sortingState) {\n  return sortingState.sortedRows;\n});\n/**\r\n * Get the id and the model of the rows after the sorting process.\r\n * @category Sorting\r\n */\n\nexport var gridSortedRowEntriesSelector = createSelector(gridSortedRowIdsSelector, gridRowsLookupSelector, function (sortedIds, idRowsLookup) {\n  return sortedIds.map(function (id) {\n    return {\n      id: id,\n      model: idRowsLookup[id]\n    };\n  });\n});\n/**\r\n * Get the current sorting model.\r\n * @category Sorting\r\n */\n\nexport var gridSortModelSelector = createSelector(gridSortingStateSelector, function (sorting) {\n  return sorting.sortModel;\n});\n\n/**\r\n * @category Sorting\r\n * @ignore - do not document.\r\n */\nexport var gridSortColumnLookupSelector = createSelector(gridSortModelSelector, function (sortModel) {\n  var result = sortModel.reduce(function (res, sortItem, index) {\n    res[sortItem.field] = {\n      sortDirection: sortItem.sort,\n      sortIndex: sortModel.length > 1 ? index + 1 : undefined\n    };\n    return res;\n  }, {});\n  return result;\n});","map":null,"metadata":{},"sourceType":"module"}